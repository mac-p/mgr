<?xml version="1.0" encoding="utf-8"?><!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.1//EN' 'http://www.it.uu.se/research/group/darts/uppaal/flat-1_1.dtd'><nta><declaration>const int MAX_MVMTS_PER_PHASE = 2;
const int MVMT_NUMBER = 8;
const int PH_NUMBER = 4;

typedef int[0, MVMT_NUMBER - 1] mvmt;
typedef int[0, PH_NUMBER - 1] ph;
typedef int[-1, MVMT_NUMBER - 1] emvmt; // -1 stands for no mvmt

const emvmt NONE = -1;

// Detector -&gt; MvmtCtrl
chan act[MVMT_NUMBER];   //detector actuation (pulse)

// MvmtCtrl -&gt; Light 
chan chg[MVMT_NUMBER];             // change light colour displayed

//MvmtCtrl -&gt; PhaseCtrl        
emvmt who = -1;

broadcast chan call[PH_NUMBER];    // call for service (sent while inactive)
bool call_arr[MVMT_NUMBER];
chan gapped_out[PH_NUMBER];        // inform that the movement has gapped out
chan gone_off[PH_NUMBER];          // inform that the yield procedure has been finished

// PhaseCtrl -&gt; MvmtCtrl
chan go[MVMT_NUMBER];              // start movement
chan go_off[MVMT_NUMBER];          // immediately start yield procedure (i.e. amber and clearance intervals)

// PhaseCtrl -&gt; MaxTimer
chan timer_on[PH_NUMBER];
chan timer_off[PH_NUMBER];

// MaxTimer --&gt; PhaseCtrl; MaxTimer --&gt; MvmtCtrls (real broadcast!) 
broadcast chan maxed_out[PH_NUMBER]; 
clock max_t[PH_NUMBER];

//PhaseCtrl --&gt; PhaseCtrl (or RingCtrl in case of 'Rest in Red')
broadcast chan opp;   // call for service
int[0, MAX_MVMTS_PER_PHASE] demand[PH_NUMBER];


/*Additional parameters*/
const bool late[MVMT_NUMBER] = {false, false, false, false, false, false, false, false};//, false, false};
const bool hold[MVMT_NUMBER] = {true, true, true, true, true, true, true, true};//, true, true};
const int min[MVMT_NUMBER] = {8, 8, 8, 8, 8, 8, 8, 8};//, 8, 8};

bool held[MVMT_NUMBER] = {false, false, false, false, false, false, false, false};//, false, false};
bool service[MVMT_NUMBER] = {true, true, true, true, true, true, true, true}; 


// RingCtrl -&gt; PhaseCtrl
chan start[PH_NUMBER];
// PhaseCtrl -&gt; RingCtrl              
chan finished[PH_NUMBER];           


// PhaseCtrl -&gt; MvmtCtrl (real broadcast!)
broadcast chan end_rest;             
bool rest = false;

// PedCtrl -&gt; PedButton
chan button_reset[MVMT_NUMBER];      </declaration><template><name x="5" y="5">Light</name><parameter>const mvmt id</parameter><declaration>// Place local declarations here.
clock green_t;</declaration><location id="id0" x="-48" y="-64" color="#ffff00"><name x="-112" y="-72">Amber</name></location><location id="id1" x="16" y="40" color="#00ff00"><name x="-8" y="56">Green</name></location><location id="id2" x="72" y="-64" color="#ffa500"><name x="88" y="-72">RedAmber</name></location><location id="id3" x="16" y="-160" color="#ff0000"><name x="6" y="-190">Red</name></location><init ref="id3"/><transition><source ref="id0"/><target ref="id3"/><label kind="synchronisation" x="-80" y="-128">chg[id]?</label></transition><transition><source ref="id1"/><target ref="id0"/><label kind="synchronisation" x="-80" y="-8">chg[id]?</label></transition><transition><source ref="id2"/><target ref="id1"/><label kind="synchronisation" x="56" y="-16">chg[id]?</label><label kind="assignment" x="56" y="0">green_t = 0</label></transition><transition><source ref="id3"/><target ref="id2"/><label kind="synchronisation" x="48" y="-128">chg[id]?</label></transition></template><template><name x="5" y="5">PedLight</name><parameter>const mvmt id</parameter><declaration>// Place local declarations here.
</declaration><location id="id4" x="-72" y="-64" color="#ffa500"><name x="-192" y="-72">FlashingGreen</name></location><location id="id5" x="16" y="40" color="#00ff00"><name x="-8" y="56">Green</name></location><location id="id6" x="16" y="-160" color="#ff0000"><name x="6" y="-190">Red</name></location><init ref="id6"/><transition><source ref="id4"/><target ref="id6"/><label kind="synchronisation" x="-104" y="-128">chg[id]?</label></transition><transition><source ref="id5"/><target ref="id4"/><label kind="synchronisation" x="-80" y="-8">chg[id]?</label></transition><transition><source ref="id6"/><target ref="id5"/><label kind="synchronisation" x="24" y="-72">chg[id]?</label></transition></template><template><name x="5" y="5">CarPulseDetector</name><parameter>const mvmt id</parameter><declaration>// Place local declarations here.
clock zeno;</declaration><location id="id7" x="-144" y="-184"><name x="-128" y="-192">Actuated</name><committed/></location><location id="id8" x="-144" y="-400"><name x="-154" y="-430">Off</name></location><init ref="id8"/><transition><source ref="id8"/><target ref="id7"/><label kind="guard" x="-136" y="-320">service[id] &amp;&amp; zeno &gt;= 1</label><label kind="assignment" x="-136" y="-304">zeno = 0</label></transition><transition><source ref="id7"/><target ref="id8"/><label kind="synchronisation" x="-256" y="-336">act[id]!</label><nail x="-200" y="-232"/><nail x="-200" y="-360"/></transition></template><template><name>MaxTimer</name><parameter>const ph pid, const int MAX</parameter><location id="id9" x="-160" y="-40"><committed/></location><location id="id10" x="56" y="-40"><name x="48" y="-88">Running</name><label kind="invariant" x="48" y="-72">max_t[pid] &lt;= MAX</label></location><location id="id11" x="-352" y="-40"><name x="-362" y="-70">Off</name></location><init ref="id11"/><transition><source ref="id10"/><target ref="id11"/><label kind="synchronisation" x="-192" y="24">timer_off[pid]?</label><label kind="assignment" x="-192" y="40">max_t[pid] = 0</label><nail x="-72" y="16"/><nail x="-224" y="16"/></transition><transition><source ref="id9"/><target ref="id11"/><label kind="synchronisation" x="-300" y="-55">maxed_out[pid]!</label><label kind="assignment" x="-296" y="-40">max_t[pid] = 0</label></transition><transition><source ref="id10"/><target ref="id9"/><label kind="guard" x="-136" y="-56">max_t[pid] == MAX</label></transition><transition><source ref="id11"/><target ref="id10"/><label kind="synchronisation" x="-200" y="-144">timer_on[pid]?</label><label kind="assignment" x="-200" y="-128">max_t[pid] = 0</label><nail x="-208" y="-112"/><nail x="-88" y="-112"/></transition></template><template><name>Ring</name><parameter>const ph rest_ph</parameter><declaration>bool any_demand() {
    return exists(i : ph) (demand[i] &gt; 0);
}

ph cur = PH_NUMBER - 1;</declaration><location id="id12" x="240" y="-32"><committed/></location><location id="id13" x="368" y="-64"><committed/></location><location id="id14" x="120" y="-64" color="#00ff00"><name x="96" y="-96">Active</name></location><location id="id15" x="-96" y="-64"><committed/></location><init ref="id13"/><transition><source ref="id12"/><target ref="id14"/><label kind="synchronisation" x="120" y="-24">start[rest_ph]!</label><nail x="152" y="-32"/></transition><transition><source ref="id15"/><target ref="id13"/><label kind="guard" x="96" y="-160">!demand[cur]</label><nail x="8" y="-144"/><nail x="288" y="-144"/></transition><transition><source ref="id13"/><target ref="id12"/><label kind="guard" x="256" y="-24">!any_demand()</label><label kind="assignment" x="256" y="-8">cur = rest_ph,
rest = true</label><nail x="328" y="-32"/></transition><transition><source ref="id13"/><target ref="id15"/><label kind="guard" x="32" y="72">any_demand()</label><label kind="assignment" x="32" y="88">cur = (cur + 1) % PH_NUMBER</label><nail x="368" y="104"/><nail x="-96" y="104"/></transition><transition><source ref="id14"/><target ref="id13"/><label kind="synchronisation" x="160" y="-80">finished[cur]?</label></transition><transition><source ref="id15"/><target ref="id14"/><label kind="guard" x="-8" y="-96">demand[cur]</label><label kind="synchronisation" x="-8" y="-80">start[cur]!</label></transition></template><template><name x="5" y="5">PedCtrl</name><parameter>const mvmt id, const ph pid, const int GREEN, const int FLASHING, const int RED_CLEAR</parameter><declaration>// Place local declarations here.
clock fixed_t;
clock gap_t;

clock wait_t;

bool stored_act = false;</declaration><location id="id16" x="-120" y="-144"><committed/></location><location id="id17" x="-616" y="40"><committed/></location><location id="id18" x="-496" y="72"><committed/></location><location id="id19" x="-616" y="128" color="#ff0000"><name x="-744" y="120">RedNoDemand</name></location><location id="id20" x="-616" y="-240"><committed/></location><location id="id21" x="-616" y="-56" color="#ff0000"><name x="-712" y="-64">RedWaiting</name></location><location id="id22" x="-360" y="-48" color="#ff0000"><name x="-352" y="-40">RedClear</name><label kind="invariant" x="-352" y="-24">fixed_t &lt;= RED_CLEAR</label></location><location id="id23" x="-120" y="-48" color="#ffff00"><name x="-112" y="-40">FlashingGreen</name><label kind="invariant" x="-112" y="-24">fixed_t &lt;= FLASHING</label></location><location id="id24" x="-392" y="-240" color="#00ff00"><name x="-416" y="-224">Green</name><label kind="invariant" x="-416" y="-208">fixed_t &lt;= GREEN</label></location><init ref="id19"/><transition><source ref="id16"/><target ref="id23"/><label kind="synchronisation" x="-112" y="-104">button_reset[id]!</label></transition><transition><source ref="id22"/><target ref="id22"/><label kind="synchronisation" x="-352" y="0">act[id]?</label><label kind="assignment" x="-352" y="16">stored_act = true,
demand[pid]++</label><nail x="-360" y="72"/><nail x="-392" y="72"/></transition><transition><source ref="id23"/><target ref="id23"/><label kind="synchronisation" x="-112" y="0">act[id]?</label><label kind="assignment" x="-112" y="16">stored_act = true,
demand[pid]++</label><nail x="-120" y="72"/><nail x="-152" y="72"/></transition><transition><source ref="id19"/><target ref="id17"/><label kind="synchronisation" x="-672" y="64">act[id]?</label><label kind="assignment" x="-736" y="80">demand[pid]++</label></transition><transition><source ref="id18"/><target ref="id19"/><label kind="guard" x="-584" y="112">!stored_act</label></transition><transition><source ref="id17"/><target ref="id21"/><label kind="synchronisation" x="-752" y="-40">call[pid]!</label><label kind="assignment" x="-752" y="-24">call_arr[id] = true,
who = id,
stored_act = false,
wait_t = 0</label></transition><transition><source ref="id18"/><target ref="id17"/><label kind="guard" x="-584" y="32">stored_act</label></transition><transition><source ref="id20"/><target ref="id24"/><label kind="synchronisation" x="-528" y="-280">chg[id]!</label><label kind="assignment" x="-552" y="-264">fixed_t = 0</label></transition><transition><source ref="id21"/><target ref="id20"/><label kind="synchronisation" x="-752" y="-168">go[id]?</label><label kind="assignment" x="-752" y="-152">call_arr[id] = false,
demand[pid]--</label></transition><transition><source ref="id22"/><target ref="id18"/><label kind="guard" x="-496" y="-88">fixed_t == 
RED_CLEAR</label><label kind="synchronisation" x="-496" y="-64">gone_off[pid]!</label><nail x="-496" y="-48"/></transition><transition><source ref="id23"/><target ref="id22"/><label kind="guard" x="-288" y="-96">fixed_t == FLASHING</label><label kind="synchronisation" x="-288" y="-80">chg[id]!</label><label kind="assignment" x="-288" y="-64">fixed_t = 0</label></transition><transition><source ref="id24"/><target ref="id16"/><label kind="guard" x="-112" y="-240">fixed_t == GREEN</label><label kind="synchronisation" x="-112" y="-224">chg[id]!</label><label kind="assignment" x="-112" y="-208">fixed_t = 0</label><nail x="-120" y="-240"/></transition></template><template><name x="5" y="5">PedButton</name><parameter>const mvmt id</parameter><declaration>// Place local declarations here.
</declaration><location id="id25" x="-224" y="-216"><name x="-208" y="-224">On</name></location><location id="id26" x="-224" y="-320"><name x="-208" y="-328">Pressed</name><committed/></location><location id="id27" x="-224" y="-440"><name x="-234" y="-470">Off</name></location><init ref="id27"/><transition><source ref="id27"/><target ref="id26"/></transition><transition><source ref="id25"/><target ref="id27"/><label kind="synchronisation" x="-416" y="-328">button_reset[id]?</label><nail x="-288" y="-248"/><nail x="-288" y="-408"/></transition><transition><source ref="id26"/><target ref="id25"/><label kind="synchronisation" x="-216" y="-296">act[id]!</label></transition></template><template><name>RingRestInRed</name><declaration>bool any_demand() {
    return exists(i : ph) (demand[i] &gt; 0);
}

ph cur = 0;</declaration><location id="id28" x="312" y="-64"><committed/></location><location id="id29" x="144" y="-64" color="#00ff00"><name x="134" y="-94">Active</name></location><location id="id30" x="8" y="-64"><committed/></location><location id="id31" x="312" y="192" color="#ff0000"><name x="280" y="208">RedRest</name></location><init ref="id31"/><transition><source ref="id30"/><target ref="id28"/><label kind="guard" x="96" y="-160">!demand[cur]</label><nail x="64" y="-144"/><nail x="240" y="-144"/></transition><transition><source ref="id28"/><target ref="id31"/><label kind="guard" x="320" y="48">!any_demand()</label><label kind="assignment" x="320" y="64">cur = 0</label></transition><transition><source ref="id28"/><target ref="id30"/><label kind="guard" x="56" y="-24">any_demand()</label><label kind="assignment" x="56" y="-8">cur = (cur + 1) % PH_NUMBER</label><nail x="272" y="16"/><nail x="48" y="16"/></transition><transition><source ref="id29"/><target ref="id28"/><label kind="synchronisation" x="160" y="-80">finished[cur]?</label></transition><transition><source ref="id30"/><target ref="id29"/><label kind="guard" x="40" y="-96">demand[cur]</label><label kind="synchronisation" x="40" y="-80">start[cur]!</label></transition><transition><source ref="id31"/><target ref="id30"/><label kind="synchronisation" x="-32" y="88">opp?</label><nail x="8" y="192"/></transition></template><template><name>PhaseCtrl1</name><parameter>const ph id, const mvmt m1</parameter><declaration>bool timer_set = false;

bool opp_demand(const ph id) {
    return exists(i : ph) (demand[i] &gt; 0);
}</declaration><location id="id32" x="-176" y="-456"><committed/></location><location id="id33" x="-176" y="-168"><committed/></location><location id="id34" x="-48" y="-368"><committed/></location><location id="id35" x="-816" y="-176"><name x="-936" y="-184">InactiveGotCall</name><committed/></location><location id="id36" x="-816" y="-104" color="#ff0000"><name x="-888" y="-112">Inactive</name></location><location id="id37" x="-616" y="-104"><committed/></location><location id="id38" x="-176" y="-104" color="#ffff00"></location><location id="id39" x="-176" y="-232"><committed/></location><location id="id40" x="-176" y="-288" color="#00ff00"><name x="-160" y="-280">Active</name></location><location id="id41" x="-480" y="-288"><committed/></location><location id="id42" x="-672" y="-288"><committed/></location><location id="id43" x="-816" y="-288" color="#ff0000"><name x="-944" y="-296">InactiveWaiting</name></location><init ref="id36"/><transition><source ref="id37"/><target ref="id35"/><label kind="guard" x="-744" y="-208">call_arr[m1]</label><label kind="synchronisation" x="-744" y="-192">finished[id]!</label><nail x="-616" y="-176"/></transition><transition><source ref="id42"/><target ref="id41"/><label kind="guard" x="-632" y="-320">opp_demand(id)</label><label kind="synchronisation" x="-632" y="-304">go[m1]!</label></transition><transition><source ref="id37"/><target ref="id36"/><label kind="guard" x="-752" y="-104">!call_arr[m1]</label><label kind="synchronisation" x="-752" y="-88">finished[id]!</label></transition><transition><source ref="id32"/><target ref="id34"/><label kind="guard" x="-112" y="-432">!rest</label></transition><transition><source ref="id36"/><target ref="id42"/><label kind="guard" x="-864" y="-392">rest</label><label kind="synchronisation" x="-864" y="-376">start[id]?</label><nail x="-816" y="-48"/><nail x="-976" y="-48"/><nail x="-976" y="-360"/><nail x="-672" y="-360"/></transition><transition><source ref="id32"/><target ref="id34"/><label kind="guard" x="-48" y="-456">rest</label><label kind="synchronisation" x="-48" y="-424">end_rest!</label><label kind="assignment" x="-48" y="-440">rest = false</label><nail x="-48" y="-456"/></transition><transition><source ref="id39"/><target ref="id33"/><label kind="guard" x="24" y="-216">!timer_set</label><nail x="16" y="-232"/><nail x="16" y="-168"/></transition><transition><source ref="id39"/><target ref="id33"/><label kind="guard" x="-160" y="-232">timer_set</label><label kind="synchronisation" x="-168" y="-216">timer_off[id]!</label><label kind="assignment" x="-168" y="-200">timer_set = false</label></transition><transition><source ref="id34"/><target ref="id40"/><label kind="synchronisation" x="-40" y="-336">timer_on[id]!</label><label kind="assignment" x="-40" y="-320">timer_set = true</label><nail x="-48" y="-288"/></transition><transition><source ref="id40"/><target ref="id32"/><label kind="guard" x="-168" y="-360">!timer_set</label><label kind="synchronisation" x="-168" y="-336">opp?</label></transition><transition><source ref="id40"/><target ref="id38"/><label kind="synchronisation" x="-360" y="-216">maxed_out[id]?</label><label kind="assignment" x="-376" y="-200">timer_set = false</label><nail x="-248" y="-232"/><nail x="-248" y="-168"/></transition><transition><source ref="id35"/><target ref="id43"/><label kind="synchronisation" x="-848" y="-240">opp!</label></transition><transition><source ref="id36"/><target ref="id35"/><label kind="synchronisation" x="-872" y="-152">call[id]?</label></transition><transition><source ref="id38"/><target ref="id37"/><label kind="synchronisation" x="-440" y="-104">gone_off[id]?</label></transition><transition><source ref="id33"/><target ref="id38"/><label kind="synchronisation" x="-168" y="-152">go_off[m1]!</label></transition><transition><source ref="id40"/><target ref="id39"/><label kind="synchronisation" x="-160" y="-264">gapped_out[id]?</label></transition><transition><source ref="id41"/><target ref="id40"/><label kind="synchronisation" x="-376" y="-304">timer_on[id]!</label><label kind="assignment" x="-376" y="-320">timer_set = true</label></transition><transition><source ref="id42"/><target ref="id40"/><label kind="guard" x="-512" y="-400">!opp_demand(id)</label><label kind="synchronisation" x="-512" y="-384">go[m1]!</label><nail x="-600" y="-360"/><nail x="-248" y="-360"/></transition><transition><source ref="id43"/><target ref="id42"/><label kind="synchronisation" x="-768" y="-312">start[id]?</label></transition></template><template><name>PhaseCtrlF1</name><parameter>const ph id, const mvmt m1</parameter><declaration>bool timer_set = false;

bool opp_demand(const ph id) {
    return exists(i : ph) (demand[i] &gt; 0);
}</declaration><location id="id44" x="-816" y="-176"><committed/></location><location id="id45" x="-816" y="-104" color="#ff0000"><name x="-888" y="-112">Inactive</name></location><location id="id46" x="-504" y="-104"><committed/></location><location id="id47" x="-440" y="-288" color="#00ff00"><name x="-424" y="-288">Active</name></location><location id="id48" x="-672" y="-288"><committed/></location><location id="id49" x="-816" y="-288" color="#ff0000"><name x="-944" y="-296">InactiveWaiting</name></location><init ref="id45"/><transition><source ref="id46"/><target ref="id44"/><label kind="guard" x="-680" y="-208">call_arr[m1]</label><label kind="synchronisation" x="-680" y="-192">finished[id]!</label><nail x="-504" y="-176"/></transition><transition><source ref="id44"/><target ref="id49"/><label kind="synchronisation" x="-848" y="-240">opp!</label></transition><transition><source ref="id45"/><target ref="id44"/><label kind="synchronisation" x="-872" y="-144">call[id]?</label></transition><transition><source ref="id46"/><target ref="id45"/><label kind="guard" x="-720" y="-134">!call_arr[m1]</label><label kind="synchronisation" x="-720" y="-119">finished[id]!</label></transition><transition><source ref="id47"/><target ref="id46"/><label kind="synchronisation" x="-432" y="-200">gone_off[id]?</label><nail x="-440" y="-104"/></transition><transition><source ref="id48"/><target ref="id47"/><label kind="synchronisation" x="-584" y="-312">go[m1]!</label></transition><transition><source ref="id49"/><target ref="id48"/><label kind="synchronisation" x="-768" y="-312">start[id]?</label></transition></template><template><name x="5" y="5">MovementCtrl</name><parameter>const mvmt id, const ph pid, const int RED_AMBER, const int INIT_GREEN, const int AMBER, const int RED_CLEAR, const int GAP</parameter><declaration>// Place local declarations here.
clock fixed_t;
clock gap_t;

clock wait_t;
bool v_dem = false;

bool stored_act = false;</declaration><location id="id50" x="-392" y="-360" color="#00ff00"><name x="-408" y="-392">Rest</name></location><location id="id51" x="-616" y="40"><name x="-712" y="32">RedGotCall</name><committed/></location><location id="id52" x="-616" y="128" color="#ff0000"><name x="-744" y="120">RedNoDemand</name></location><location id="id53" x="-616" y="-136"><committed/></location><location id="id54" x="-616" y="-56" color="#ff0000"><name x="-712" y="-64">RedWaiting</name></location><location id="id55" x="-360" y="-48" color="#ff0000"><name x="-352" y="-40">RedClear</name><label kind="invariant" x="-352" y="-24">fixed_t &lt;= RED_CLEAR</label></location><location id="id56" x="-120" y="-48" color="#ffff00"><name x="-112" y="-40">Amber</name><label kind="invariant" x="-112" y="-24">fixed_t &lt;= AMBER</label></location><location id="id57" x="128" y="-48"><committed/></location><location id="id58" x="128" y="-144" color="#00ff00"><name x="144" y="-152">GappedOut</name></location><location id="id59" x="128" y="-240" color="#00ff00"><name x="152" y="-264">ExtGreen</name><label kind="invariant" x="152" y="-248">gap_t &lt;= GAP</label></location><location id="id60" x="-392" y="-240" color="#00ff00"><name x="-440" y="-224">InitGreen</name><label kind="invariant" x="-440" y="-208">fixed_t &lt;= INIT_GREEN - GAP</label></location><location id="id61" x="-616" y="-240" color="#ffa500"><name x="-712" y="-256">RedAmber</name><label kind="invariant" x="-800" y="-240">fixed_t &lt;= RED_AMBER</label></location><init ref="id52"/><transition><source ref="id55"/><target ref="id52"/><label kind="guard" x="-568" y="96">fixed_t == RED_CLEAR 
&amp;&amp; !stored_act</label><label kind="synchronisation" x="-568" y="120">gone_off[pid]!</label><nail x="-496" y="48"/></transition><transition><source ref="id52"/><target ref="id53"/><label kind="guard" x="-816" y="8">rest</label><label kind="synchronisation" x="-832" y="24">go[id]?</label><label kind="assignment" x="-912" y="40">service[id] = false</label><nail x="-616" y="152"/><nail x="-784" y="152"/><nail x="-784" y="-136"/></transition><transition><source ref="id50"/><target ref="id59"/><label kind="synchronisation" x="-312" y="-360">end_rest?</label><label kind="assignment" x="-312" y="-344">gap_t = 0,
service[id] = true</label><nail x="-136" y="-360"/></transition><transition><source ref="id60"/><target ref="id50"/><label kind="guard" x="-600" y="-328">rest &amp;&amp;
fixed_t == INIT_GREEN - GAP</label></transition><transition><source ref="id60"/><target ref="id59"/><label kind="guard" x="-248" y="-296">!rest &amp;&amp;
fixed_t == INIT_GREEN - GAP</label><label kind="assignment" x="-248" y="-272">gap_t = 0,
service[id] = true</label></transition><transition><source ref="id55"/><target ref="id55"/><label kind="synchronisation" x="-360" y="32">act[id]?</label><label kind="assignment" x="-360" y="48">stored_act = true,
demand[pid]++,
service[id] = false,
v_dem = true,
wait_t = 0</label><nail x="-360" y="72"/><nail x="-392" y="72"/></transition><transition><source ref="id56"/><target ref="id56"/><label kind="synchronisation" x="-120" y="32">act[id]?</label><label kind="assignment" x="-120" y="48">stored_act = true,
demand[pid]++,
service[id] = false,
v_dem = true,
wait_t = 0</label><nail x="-120" y="72"/><nail x="-152" y="72"/></transition><transition><source ref="id59"/><target ref="id58"/><label kind="guard" x="-8" y="-224">gap_t == GAP</label><label kind="synchronisation" x="-8" y="-208">gapped_out[pid]!</label><label kind="assignment" x="-8" y="-192">who = id,
service[id] = false</label></transition><transition><source ref="id52"/><target ref="id51"/><label kind="synchronisation" x="-680" y="48">act[id]?</label><label kind="assignment" x="-752" y="64">demand[pid]++,
service[id] = false,
v_dem = true,
wait_t = 0</label></transition><transition><source ref="id51"/><target ref="id54"/><label kind="synchronisation" x="-752" y="-40">call[pid]!</label><label kind="assignment" x="-752" y="-24">call_arr[id] = true,
who = id,
stored_act = false</label></transition><transition><source ref="id59"/><target ref="id59"/><label kind="synchronisation" x="128" y="-360">act[id]?</label><label kind="assignment" x="128" y="-344">gap_t = 0</label><nail x="128" y="-328"/><nail x="160" y="-328"/></transition><transition><source ref="id53"/><target ref="id61"/><label kind="synchronisation" x="-672" y="-200">chg[id]!</label><label kind="assignment" x="-696" y="-184">fixed_t = 0</label></transition><transition><source ref="id54"/><target ref="id53"/><label kind="synchronisation" x="-752" y="-120">go[id]?</label><label kind="assignment" x="-752" y="-104">call_arr[id] = false,
demand[pid]--</label></transition><transition><source ref="id55"/><target ref="id51"/><label kind="guard" x="-568" y="-96">fixed_t == RED_CLEAR 
&amp;&amp; stored_act</label><label kind="synchronisation" x="-568" y="-64">gone_off[pid]!</label><nail x="-488" y="-48"/></transition><transition><source ref="id56"/><target ref="id55"/><label kind="guard" x="-288" y="-96">fixed_t == AMBER</label><label kind="synchronisation" x="-288" y="-80">chg[id]!</label><label kind="assignment" x="-288" y="-64">fixed_t = 0</label></transition><transition><source ref="id57"/><target ref="id56"/><label kind="synchronisation" x="-80" y="-96">chg[id]!</label><label kind="assignment" x="-80" y="-80">fixed_t = 0,
service[id] = true</label></transition><transition><source ref="id59"/><target ref="id57"/><label kind="synchronisation" x="248" y="-152">maxed_out[pid]?</label><nail x="240" y="-160"/><nail x="240" y="-112"/></transition><transition><source ref="id58"/><target ref="id57"/><label kind="synchronisation" x="48" y="-104">go_off[id]?</label></transition><transition><source ref="id61"/><target ref="id60"/><label kind="guard" x="-592" y="-288">fixed_t == RED_AMBER</label><label kind="synchronisation" x="-592" y="-272">chg[id]!</label><label kind="assignment" x="-592" y="-256">fixed_t = 0,
v_dem = false</label></transition></template><template><name>PhaseCtrl2</name><parameter>const ph id, const mvmt m1, const mvmt m2, const int MAX</parameter><declaration>bool opp_demand(const ph id) {
    return exists(i : ph) (demand[i] &gt; 0);
}

int[0,2] mvmts_on = 0;
int[0,2] mvmts_not_out = 0;

bool timer_set = false;

void go_actuated() {
    mvmts_on++;
    mvmts_not_out++;
}</declaration><location id="id62" x="-432" y="-384"><committed/></location><location id="id63" x="-256" y="-544"><committed/></location><location id="id64" x="-96" y="-608"><committed/></location><location id="id65" x="-272" y="-104"><committed/></location><location id="id66" x="-432" y="-456"><committed/></location><location id="id67" x="-1104" y="-80" color="#ff0000"><name x="-1176" y="-88">Inactive</name></location><location id="id68" x="-1104" y="-200"><name x="-1224" y="-208">InactiveGotCall</name><committed/></location><location id="id69" x="-824" y="32" color="#ffff00"><name x="-800" y="24">GoingOff</name></location><location id="id70" x="-824" y="-104"><urgent/></location><location id="id71" x="-664" y="-104"><committed/></location><location id="id72" x="-464" y="-104"><committed/></location><location id="id73" x="184" y="-200"><committed/></location><location id="id74" x="184" y="-288"><committed/></location><location id="id75" x="-672" y="-384"><committed/></location><location id="id76" x="-96" y="-384" color="#00ff00"><name x="-64" y="-376">Active</name></location><location id="id77" x="-832" y="-384"><committed/></location><location id="id78" x="-1000" y="-384"><committed/></location><location id="id79" x="-1104" y="-384" color="#ff0000"><name x="-1232" y="-392">InactiveWaiting</name></location><init ref="id67"/><transition><source ref="id70"/><target ref="id67"/><label kind="guard" x="-1072" y="-112">mvmts_on == 0 &amp;&amp;
demand[id] == 0</label><label kind="synchronisation" x="-1072" y="-80">finished[id]!</label><nail x="-1048" y="-144"/></transition><transition><source ref="id62"/><target ref="id66"/><label kind="guard" x="-392" y="-448">rest</label><label kind="synchronisation" x="-392" y="-432">end_rest!</label><label kind="assignment" x="-392" y="-416">rest = false</label><nail x="-400" y="-416"/></transition><transition><source ref="id62"/><target ref="id66"/><label kind="guard" x="-504" y="-424">!rest</label><nail x="-464" y="-416"/></transition><transition><source ref="id67"/><target ref="id78"/><label kind="guard" x="-1216" y="-496">rest</label><label kind="synchronisation" x="-1216" y="-480">start[id]?</label><nail x="-1104" y="-40"/><nail x="-1256" y="-40"/><nail x="-1256" y="-464"/><nail x="-1080" y="-464"/></transition><transition><source ref="id63"/><target ref="id76"/><label kind="guard" x="-224" y="-528">timer_set</label></transition><transition><source ref="id63"/><target ref="id66"/><label kind="guard" x="-376" y="-536">!timer_set</label></transition><transition><source ref="id64"/><target ref="id76"/><label kind="guard" x="160" y="-552">late[who] 
&amp;&amp; ((timer_set &amp;&amp; max_t[id] &lt;= MAX - min[who]) 
|| !timer_set)</label><label kind="synchronisation" x="160" y="-504">go[who]!</label><label kind="assignment" x="160" y="-488">go_actuated()</label><nail x="160" y="-584"/><nail x="160" y="-424"/></transition><transition><source ref="id64"/><target ref="id76"/><label kind="guard" x="-64" y="-520">late[who] &amp;&amp; timer_set &amp;&amp;
max_t[id] &gt; MAX - min[who]</label><nail x="-72" y="-576"/><nail x="-72" y="-416"/></transition><transition><source ref="id64"/><target ref="id63"/><label kind="guard" x="-232" y="-616">!late[who]</label><nail x="-144" y="-608"/></transition><transition><source ref="id76"/><target ref="id64"/><label kind="synchronisation" x="-152" y="-504">call[id]?</label><nail x="-96" y="-440"/></transition><transition><source ref="id65"/><target ref="id72"/><label kind="guard" x="-400" y="-128">!timer_set</label></transition><transition><source ref="id73"/><target ref="id65"/><label kind="guard" x="-64" y="-120">mvmts_not_out == 0</label><nail x="184" y="-104"/></transition><transition><source ref="id75"/><target ref="id76"/><label kind="guard" x="-488" y="-344">!opp_demand(id)</label><nail x="-576" y="-320"/><nail x="-248" y="-320"/></transition><transition><source ref="id66"/><target ref="id76"/><label kind="synchronisation" x="-336" y="-488">timer_on[id]!</label><label kind="assignment" x="-336" y="-472">timer_set = true</label><nail x="-208" y="-456"/></transition><transition><source ref="id76"/><target ref="id62"/><label kind="guard" x="-336" y="-384">!timer_set</label><label kind="synchronisation" x="-336" y="-368">opp?</label></transition><transition><source ref="id67"/><target ref="id68"/><label kind="synchronisation" x="-1160" y="-168">call[id]?</label></transition><transition><source ref="id68"/><target ref="id79"/><label kind="synchronisation" x="-1144" y="-312">opp!</label></transition><transition><source ref="id70"/><target ref="id68"/><label kind="guard" x="-1072" y="-208">mvmts_on == 0 &amp;&amp;
demand[id] &gt; 0</label><label kind="synchronisation" x="-1072" y="-184">finished[id]!</label><nail x="-1048" y="-144"/></transition><transition><source ref="id70"/><target ref="id69"/><label kind="guard" x="-816" y="-40">mvmts_on &gt; 0</label></transition><transition><source ref="id69"/><target ref="id70"/><label kind="synchronisation" x="-952" y="-48">gone_off[id]?</label><label kind="assignment" x="-944" y="-32">mvmts_on--</label><nail x="-848" y="-8"/><nail x="-848" y="-72"/></transition><transition><source ref="id76"/><target ref="id72"/><label kind="guard" x="-472" y="-256">timer_set</label><label kind="synchronisation" x="-472" y="-240">maxed_out[id]?</label><label kind="assignment" x="-472" y="-224">timer_set = false,
mvmts_not_out = 0</label><nail x="-328" y="-192"/><nail x="-464" y="-192"/></transition><transition><source ref="id71"/><target ref="id70"/><label kind="guard" x="-768" y="-152">!held[m2]</label><nail x="-696" y="-136"/><nail x="-776" y="-136"/></transition><transition><source ref="id71"/><target ref="id70"/><label kind="guard" x="-776" y="-104">held[m2]</label><label kind="synchronisation" x="-776" y="-88">go_off[m2]!</label><label kind="assignment" x="-776" y="-72">held[m2] = false</label></transition><transition><source ref="id72"/><target ref="id71"/><label kind="guard" x="-600" y="-152">!held[m1]</label><nail x="-520" y="-136"/><nail x="-608" y="-136"/></transition><transition><source ref="id72"/><target ref="id71"/><label kind="guard" x="-608" y="-104">held[m1]</label><label kind="synchronisation" x="-608" y="-88">go_off[m1]!</label><label kind="assignment" x="-608" y="-72">held[m1] = false</label></transition><transition><source ref="id76"/><target ref="id76"/><label kind="synchronisation" x="-136" y="-288">gone_off[id]?</label><label kind="assignment" x="-136" y="-272">mvmts_on--</label><nail x="-96" y="-288"/><nail x="-136" y="-288"/></transition><transition><source ref="id65"/><target ref="id72"/><label kind="guard" x="-400" y="-72">timer_set</label><label kind="synchronisation" x="-400" y="-56">timer_off[id]!</label><label kind="assignment" x="-400" y="-40">timer_set = false</label><nail x="-304" y="-80"/><nail x="-416" y="-80"/></transition><transition><source ref="id73"/><target ref="id76"/><label kind="guard" x="24" y="-200">mvmts_not_out &gt; 0</label><nail x="104" y="-200"/></transition><transition><source ref="id74"/><target ref="id73"/><label kind="guard" x="216" y="-264">hold[who]</label><label kind="assignment" x="216" y="-248">held[who] = true</label><nail x="208" y="-272"/><nail x="208" y="-232"/></transition><transition><source ref="id74"/><target ref="id73"/><label kind="guard" x="104" y="-264">!hold[who]</label><label kind="synchronisation" x="96" y="-248">go_off[who]!</label></transition><transition><source ref="id76"/><target ref="id74"/><label kind="synchronisation" x="128" y="-360">gapped_out[id]?</label><label kind="assignment" x="136" y="-344">mvmts_not_out--</label><nail x="80" y="-384"/></transition><transition><source ref="id77"/><target ref="id75"/><label kind="guard" x="-816" y="-432">!call_arr[m2] &amp;&amp; !rest</label><nail x="-816" y="-416"/><nail x="-688" y="-416"/></transition><transition><source ref="id78"/><target ref="id77"/><label kind="guard" x="-992" y="-432">!call_arr[m1] &amp;&amp; !rest</label><nail x="-984" y="-416"/><nail x="-856" y="-416"/></transition><transition><source ref="id77"/><target ref="id75"/><label kind="guard" x="-816" y="-376">call_arr[m2] || rest</label><label kind="synchronisation" x="-816" y="-360">go[m2]!</label><label kind="assignment" x="-816" y="-344">go_actuated()</label></transition><transition><source ref="id75"/><target ref="id66"/><label kind="guard" x="-624" y="-472">opp_demand(id)</label><nail x="-576" y="-456"/></transition><transition><source ref="id78"/><target ref="id77"/><label kind="guard" x="-984" y="-384">call_arr[m1] || rest</label><label kind="synchronisation" x="-984" y="-368">go[m1]!</label><label kind="assignment" x="-984" y="-352">go_actuated()</label></transition><transition><source ref="id79"/><target ref="id78"/><label kind="synchronisation" x="-1088" y="-408">start[id]?</label></transition></template><system>const int RED_AMBER = 1; 
const int INIT_GREEN = 7; 
const int AMBER = 3; 
const int RED_CLEAR = 3; 
const int GAP = 2;

const int PED_GREEN = 5;
const int FLASHING = 2;
const int PED_CLEAR = 3;

const int MAX = 12;

/*Process templates instantiations*/

//A handful of constants
const mvmt M00 = 0;
const mvmt M01 = 1;
const mvmt M10 = 2;
const mvmt M11 = 3;
const mvmt M20 = 4;
const mvmt M21 = 5;
const mvmt M30 = 6;
const mvmt M31 = 7;

RC = RingRestInRed();

PC0 = PhaseCtrl2(0, M00, M01, MAX);
    MTim0 = MaxTimer(0, MAX);
    MvC00 = MovementCtrl(M00, 0, RED_AMBER, INIT_GREEN, AMBER, RED_CLEAR, GAP);
        L00 = Light(M00);
        Det00 = CarPulseDetector(M00);
    MvC01 = MovementCtrl(M01, 0, RED_AMBER, INIT_GREEN, AMBER, RED_CLEAR, GAP);
        L01 = Light(M01);
        Det01 = CarPulseDetector(M01);

PC1 = PhaseCtrl2(1, M10, M11, MAX);
    MTim1 = MaxTimer(1, MAX);
    MvC10 = MovementCtrl(M10, 1, RED_AMBER, INIT_GREEN, AMBER, RED_CLEAR, GAP);
        L10 = Light(M10);
        Det10 = CarPulseDetector(M10);
    MvC11 = MovementCtrl(M11, 1, RED_AMBER, INIT_GREEN, AMBER, RED_CLEAR, GAP);
        L11 = Light(M11);
        Det11 = CarPulseDetector(M11);

PC2 = PhaseCtrl2(2, M20, M21, MAX);
    MTim2 = MaxTimer(2, MAX);
    MvC20 = MovementCtrl(M20, 2, RED_AMBER, INIT_GREEN, AMBER, RED_CLEAR, GAP);
        L20 = Light(M20);
        Det20 = CarPulseDetector(M20);
    MvC21 = MovementCtrl(M21, 2, RED_AMBER, INIT_GREEN, AMBER, RED_CLEAR, GAP);
        L21 = Light(M21);
        Det21 = CarPulseDetector(M21);

PC3 = PhaseCtrl2(3, M30, M31, MAX);
    MTim3 = MaxTimer(3, MAX);
    MvC30 = MovementCtrl(M30, 3, RED_AMBER, INIT_GREEN, AMBER, RED_CLEAR, GAP);
        L30 = Light(M30);
        Det30 = CarPulseDetector(M30);
    MvC31 = MovementCtrl(M31, 3, RED_AMBER, INIT_GREEN, AMBER, RED_CLEAR, GAP);
        L31 = Light(M31);
        Det31 = CarPulseDetector(M31);
/* Processes composing the system*/
system RC,
       PC0, MTim0,
            MvC00, L00, Det00, 
            MvC01, L01, Det01,
       PC1, MTim1,
            MvC10, L10, Det10, 
            MvC11, L11, Det11,
       PC2, MTim2,
            MvC20, L20, Det20, 
            MvC21, L21, Det21,
       PC3, MTim3,
            MvC30, L30, Det30,
            MvC31, L31, Det31;</system></nta>