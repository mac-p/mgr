<?xml version="1.0" encoding="utf-8"?><!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.1//EN' 'http://www.it.uu.se/research/group/darts/uppaal/flat-1_1.dtd'><nta><declaration>//Tmp
//clock sys;

// Place global declarations here.
const int MVMT_NUMBER = 3;
const int PH_NUMBER = 2;
const int MAX_MVMTS_PER_PHASE = 2;

typedef int[0, MVMT_NUMBER - 1] mvmt;
typedef int[0, PH_NUMBER - 1] ph;
typedef int[-1, MVMT_NUMBER - 1] emvmt; // -1 stands for no mvmt

// Detector -&gt; MvmtCtrl
broadcast chan act[MVMT_NUMBER];   //detector actuation (pulse)
bool act_arr[MVMT_NUMBER];

// MvmtCtrl -&gt; Light 
chan chg[MVMT_NUMBER];             // change light colour displayed

//MvmtCtrl -&gt; PhaseCtrl        
emvmt who = -1;

broadcast chan call[PH_NUMBER];    // call for service (sent while inactive)
bool call_arr[MVMT_NUMBER];
chan gapped_out[PH_NUMBER];        // inform that the movement has gapped out
chan gone_off[PH_NUMBER];          // inform that the yield procedure has been finished
// PhaseCtrl -&gt; MvmtCtrl
chan go[MVMT_NUMBER];              // start movement
chan go_off[MVMT_NUMBER];          // immediately start yield procedure (i.e. amber and clearance intervals)

// PhaseCtrl -&gt; MaxTimer
chan timer_on[PH_NUMBER];
chan timer_off[PH_NUMBER];

broadcast chan maxed_out[PH_NUMBER]; // MaxTimer --&gt; PhaseCtrl; MaxTimer --&gt; MvmtCtrls (real broadcast!) 
clock max_t[PH_NUMBER];


const bool late[MVMT_NUMBER] = {false, false, false};//, false, false};
const bool hold[MVMT_NUMBER] = {true, false, true};//, false, false};
const int min[MVMT_NUMBER] = {8, 8, 8};//, 8, 8};
bool held[MVMT_NUMBER] = {false, false, false};//, false, false};



broadcast chan opp;                  // any inactive PhaseCtrl to the active PhaseCtrl
int[0, MAX_MVMTS_PER_PHASE] demand[PH_NUMBER];

chan start[PH_NUMBER];               // RingCtrl -&gt; PhaseCtrl
chan finished[PH_NUMBER];            // PhaseCtrl -&gt; RingCtrl 

</declaration><template><name>RingCtrl2</name><declaration>bool any_demand() {
    return exists(i : ph) (demand[i] &gt; 0);
}</declaration><location id="id0" x="224" y="-56"><committed/></location><location id="id1" x="80" y="-56"></location><location id="id2" x="-32" y="-56"><committed/></location><location id="id3" x="-152" y="-56"></location><location id="id4" x="-272" y="-56"><committed/></location><location id="id5" x="-272" y="104" color="#ff0000"><name x="-352" y="96">RedRest</name></location><init ref="id5"/><transition><source ref="id0"/><target ref="id5"/><label kind="guard" x="-72" y="80">!any_demand()</label><nail x="224" y="104"/></transition><transition><source ref="id0"/><target ref="id4"/><label kind="guard" x="-72" y="8">any_demand()</label><nail x="160" y="24"/><nail x="-232" y="24"/></transition><transition><source ref="id2"/><target ref="id0"/><label kind="guard" x="48" y="-144">!demand[1]</label><nail x="0" y="-128"/><nail x="184" y="-128"/></transition><transition><source ref="id1"/><target ref="id0"/><label kind="synchronisation" x="112" y="-72">finished[1]?</label></transition><transition><source ref="id2"/><target ref="id1"/><label kind="guard" x="-16" y="-88">demand[1]</label><label kind="synchronisation" x="-16" y="-72">start[1]!</label></transition><transition><source ref="id4"/><target ref="id2"/><label kind="guard" x="-192" y="-144">!demand[0]</label><nail x="-248" y="-128"/><nail x="-56" y="-128"/></transition><transition><source ref="id3"/><target ref="id2"/><label kind="synchronisation" x="-136" y="-72">finished[0]?</label></transition><transition><source ref="id4"/><target ref="id3"/><label kind="guard" x="-256" y="-88">demand[0]</label><label kind="synchronisation" x="-256" y="-72">start[0]!</label></transition><transition><source ref="id5"/><target ref="id4"/><label kind="synchronisation" x="-312" y="32">opp?</label></transition></template><template><name>PhaseCtrl1</name><parameter>const ph id, const mvmt m1</parameter><declaration>bool timer_set = false;

bool opp_demand(const ph id) {
    return exists(i : ph) (demand[i] &gt; 0);
}</declaration><location id="id6" x="-208" y="-168"><committed/></location><location id="id7" x="-208" y="-368"><committed/></location><location id="id8" x="-688" y="-144"><committed/></location><location id="id9" x="-816" y="-176"><committed/></location><location id="id10" x="-816" y="-104" color="#ff0000"></location><location id="id11" x="-616" y="-104"><committed/></location><location id="id12" x="-208" y="-104" color="#ffff00"></location><location id="id13" x="-208" y="-232"><committed/></location><location id="id14" x="-208" y="-288" color="#00ff00"><name x="-192" y="-288">ActiveMaxSet</name></location><location id="id15" x="-456" y="-288"><committed/></location><location id="id16" x="-616" y="-288"><committed/></location><location id="id17" x="-816" y="-288" color="#ff0000"><name x="-944" y="-296">InactiveWaiting</name></location><init ref="id10"/><transition><source ref="id13"/><target ref="id6"/><label kind="guard" x="-8" y="-216">!timer_set</label><nail x="-16" y="-232"/><nail x="-16" y="-168"/></transition><transition><source ref="id13"/><target ref="id6"/><label kind="guard" x="-192" y="-232">timer_set</label><label kind="synchronisation" x="-200" y="-216">timer_off[id]!</label><label kind="assignment" x="-200" y="-200">timer_set = false</label></transition><transition><source ref="id7"/><target ref="id14"/><label kind="synchronisation" x="-88" y="-360">timer_on[id]!</label><label kind="assignment" x="-88" y="-344">timer_set = true</label><nail x="-96" y="-368"/><nail x="-96" y="-320"/></transition><transition><source ref="id14"/><target ref="id7"/><label kind="guard" x="-200" y="-344">!timer_set</label><label kind="synchronisation" x="-200" y="-328">opp?</label></transition><transition><source ref="id8"/><target ref="id10"/><label kind="guard" x="-792" y="-112">!call_arr[m1]</label></transition><transition><source ref="id8"/><target ref="id9"/><label kind="guard" x="-776" y="-200">call_arr[m1]</label></transition><transition><source ref="id14"/><target ref="id12"/><label kind="synchronisation" x="-392" y="-216">maxed_out[id]?</label><label kind="assignment" x="-408" y="-200">timer_set = false</label><nail x="-280" y="-232"/><nail x="-280" y="-168"/></transition><transition><source ref="id9"/><target ref="id17"/><label kind="synchronisation" x="-856" y="-232">opp!</label></transition><transition><source ref="id10"/><target ref="id9"/><label kind="synchronisation" x="-872" y="-152">call[id]?</label></transition><transition><source ref="id11"/><target ref="id8"/><label kind="synchronisation" x="-640" y="-144">finished[id]!</label></transition><transition><source ref="id12"/><target ref="id11"/><label kind="synchronisation" x="-472" y="-104">gone_off[id]?</label></transition><transition><source ref="id6"/><target ref="id12"/><label kind="synchronisation" x="-200" y="-152">go_off[m1]!</label></transition><transition><source ref="id14"/><target ref="id13"/><label kind="synchronisation" x="-200" y="-264">gapped_out[id]?</label></transition><transition><source ref="id15"/><target ref="id14"/><label kind="guard" x="-400" y="-392">!opp_demand(id)</label><nail x="-400" y="-376"/><nail x="-272" y="-376"/></transition><transition><source ref="id15"/><target ref="id14"/><label kind="guard" x="-400" y="-336">opp_demand(id)</label><label kind="synchronisation" x="-392" y="-304">timer_on[id]!</label><label kind="assignment" x="-392" y="-320">timer_set = true</label></transition><transition><source ref="id16"/><target ref="id15"/><label kind="guard" x="-576" y="-328">call_arr[m1]</label><label kind="synchronisation" x="-576" y="-312">go[m1]!</label></transition><transition><source ref="id17"/><target ref="id16"/><label kind="synchronisation" x="-744" y="-312">start[id]?</label></transition></template><template><name x="5" y="5">MovementCtrl</name><parameter>const mvmt id, const ph pid, const int RED_AMBER, const int INIT_GREEN, const int AMBER, const int RED_CLEAR, const int GAP</parameter><declaration>// Place local declarations here.
clock fixed_t;
clock gap_t;</declaration><location id="id18" x="-584" y="48"><committed/></location><location id="id19" x="-464" y="-48"><committed/></location><location id="id20" x="-584" y="120" color="#ff0000"><name x="-712" y="112">RedNoDemand</name></location><location id="id21" x="-584" y="-128"><committed/></location><location id="id22" x="-584" y="-48" color="#ff0000"><name x="-680" y="-56">RedWaiting</name></location><location id="id23" x="-296" y="-48" color="#ff0000"><name x="-336" y="-32">RedClear</name><label kind="invariant" x="-336" y="-16">fixed_t &lt;= RED_CLEAR</label></location><location id="id24" x="-96" y="-48" color="#ffff00"><name x="-112" y="-32">Amber</name><label kind="invariant" x="-112" y="-16">fixed_t &lt;= AMBER</label></location><location id="id25" x="64" y="-48"><committed/></location><location id="id26" x="-128" y="-240"><committed/></location><location id="id27" x="64" y="-144" color="#00ff00"><name x="72" y="-136">GappedOut</name></location><location id="id28" x="256" y="-240" color="#00ff00"><name x="280" y="-256">ExtGreen</name><label kind="invariant" x="280" y="-240">gap_t &lt;= GAP</label></location><location id="id29" x="-392" y="-240" color="#00ff00"><name x="-464" y="-216">InitialGreen</name><label kind="invariant" x="-464" y="-200">fixed_t &lt;= INIT_GREEN</label></location><location id="id30" x="-584" y="-240" color="#ffa500"><name x="-680" y="-256">RedAmber</name><label kind="invariant" x="-768" y="-240">fixed_t &lt;= RED_AMBER</label></location><init ref="id20"/><transition><source ref="id20"/><target ref="id18"/><label kind="synchronisation" x="-640" y="80">act[id]?</label></transition><transition><source ref="id19"/><target ref="id20"/><label kind="guard" x="-456" y="24">!act_arr[id]</label><nail x="-464" y="120"/></transition><transition><source ref="id18"/><target ref="id22"/><label kind="synchronisation" x="-720" y="-24">call[pid]!</label><label kind="assignment" x="-720" y="-8">call_arr[id] = true,
who = id,
demand[pid]++</label></transition><transition><source ref="id19"/><target ref="id18"/><label kind="guard" x="-560" y="-56">act_arr[id]</label></transition><transition><source ref="id29"/><target ref="id29"/><label kind="synchronisation" x="-392" y="-376">act[id]?</label><label kind="assignment" x="-392" y="-360">gap_t = 0</label><nail x="-392" y="-344"/><nail x="-336" y="-344"/></transition><transition><source ref="id28"/><target ref="id28"/><label kind="synchronisation" x="256" y="-376">act[id]?</label><label kind="assignment" x="256" y="-360">gap_t = 0</label><nail x="256" y="-344"/><nail x="312" y="-344"/></transition><transition><source ref="id21"/><target ref="id30"/><label kind="synchronisation" x="-640" y="-192">chg[id]!</label><label kind="assignment" x="-664" y="-176">fixed_t = 0</label></transition><transition><source ref="id22"/><target ref="id21"/><label kind="synchronisation" x="-720" y="-112">go[id]?</label><label kind="assignment" x="-720" y="-96">call_arr[id] = false,
demand[pid]--</label></transition><transition><source ref="id23"/><target ref="id19"/><label kind="guard" x="-416" y="-112">fixed_t == 
RED_CLEAR</label><label kind="synchronisation" x="-416" y="-80">gone_off[pid]!</label><label kind="assignment" x="-416" y="-64">who = id</label></transition><transition><source ref="id24"/><target ref="id23"/><label kind="guard" x="-232" y="-94">fixed_t == AMBER</label><label kind="synchronisation" x="-232" y="-79">chg[id]!</label><label kind="assignment" x="-232" y="-64">fixed_t = 0</label></transition><transition><source ref="id25"/><target ref="id24"/><label kind="synchronisation" x="-80" y="-96">chg[id]!</label><label kind="assignment" x="-80" y="-80">fixed_t = 0,
act_arr[id] = false</label></transition><transition><source ref="id28"/><target ref="id25"/><label kind="synchronisation" x="176" y="-64">maxed_out[pid]?</label><nail x="336" y="-160"/><nail x="336" y="-48"/></transition><transition><source ref="id27"/><target ref="id25"/><label kind="synchronisation" x="72" y="-112">go_off[id]?</label></transition><transition><source ref="id28"/><target ref="id27"/><label kind="guard" x="152" y="-208">gap_t == GAP</label><label kind="synchronisation" x="136" y="-192">gapped_out[pid]!</label><label kind="assignment" x="192" y="-176">who = id</label><nail x="256" y="-144"/></transition><transition><source ref="id26"/><target ref="id28"/><label kind="guard" x="16" y="-256">gap_t &lt;= GAP</label></transition><transition><source ref="id26"/><target ref="id27"/><label kind="guard" x="-128" y="-208">gap_t &gt; GAP</label><label kind="synchronisation" x="-128" y="-192">gapped_out[pid]!</label><label kind="assignment" x="-128" y="-176">who = id</label><nail x="-128" y="-144"/></transition><transition><source ref="id29"/><target ref="id26"/><label kind="guard" x="-352" y="-264">fixed_t == INIT_GREEN</label></transition><transition><source ref="id30"/><target ref="id29"/><label kind="guard" x="-568" y="-288">fixed_t == RED_AMBER</label><label kind="synchronisation" x="-568" y="-273">chg[id]!</label><label kind="assignment" x="-568" y="-258">gap_t = 0</label></transition></template><template><name x="5" y="5">Light</name><parameter>const mvmt id</parameter><declaration>// Place local declarations here.
</declaration><location id="id31" x="-48" y="-64" color="#ffff00"><name x="-112" y="-72">Amber</name></location><location id="id32" x="16" y="40" color="#00ff00"><name x="-8" y="56">Green</name></location><location id="id33" x="72" y="-64" color="#ffa500"><name x="88" y="-72">RedAmber</name></location><location id="id34" x="16" y="-160" color="#ff0000"><name x="6" y="-190">Red</name></location><init ref="id34"/><transition><source ref="id31"/><target ref="id34"/><label kind="synchronisation" x="-80" y="-128">chg[id]?</label></transition><transition><source ref="id32"/><target ref="id31"/><label kind="synchronisation" x="-80" y="-8">chg[id]?</label></transition><transition><source ref="id33"/><target ref="id32"/><label kind="synchronisation" x="56" y="-16">chg[id]?</label></transition><transition><source ref="id34"/><target ref="id33"/><label kind="synchronisation" x="48" y="-128">chg[id]?</label></transition></template><template><name x="5" y="5">PedLight</name><parameter>const mvmt id</parameter><declaration>// Place local declarations here.
</declaration><location id="id35" x="-72" y="-64" color="#ffa500"><name x="-192" y="-72">FlashingGreen</name></location><location id="id36" x="16" y="40" color="#00ff00"><name x="-8" y="56">Green</name></location><location id="id37" x="16" y="-160" color="#ff0000"><name x="6" y="-190">Red</name></location><init ref="id37"/><transition><source ref="id35"/><target ref="id37"/><label kind="synchronisation" x="-104" y="-128">chg[id]?</label></transition><transition><source ref="id36"/><target ref="id35"/><label kind="synchronisation" x="-80" y="-8">chg[id]?</label></transition><transition><source ref="id37"/><target ref="id36"/><label kind="synchronisation" x="24" y="-72">chg[id]?</label></transition></template><template><name x="5" y="5">CarPulseDetector</name><parameter>const mvmt id</parameter><declaration>// Place local declarations here.
clock zeno;</declaration><location id="id38" x="-144" y="-248"><name x="-128" y="-256">Actuated</name><committed/></location><location id="id39" x="-144" y="-400"><name x="-154" y="-430">Off</name></location><init ref="id39"/><transition><source ref="id39"/><target ref="id38"/><label kind="guard" x="-136" y="-336">zeno &gt;= 1</label><label kind="assignment" x="-136" y="-320">zeno = 0</label></transition><transition><source ref="id38"/><target ref="id39"/><label kind="synchronisation" x="-256" y="-336">act[id]!</label><label kind="assignment" x="-328" y="-320">act_arr[id] = true</label><nail x="-200" y="-288"/><nail x="-200" y="-360"/></transition></template><template><name>PhaseCtrl2</name><parameter>const ph id, const mvmt m1, const mvmt m2, const int MAX</parameter><declaration>bool opp_demand(const ph id) {
    return exists(i : ph) (demand[i] &gt; 0);
}

int[0,2] mvmts_on = 0;
int[0,2] mvmts_not_out = 0;

bool timer_set = false;
</declaration><location id="id40" x="-480" y="-568"><committed/></location><location id="id41" x="-80" y="-608"><committed/></location><location id="id42" x="-280" y="-456"><committed/></location><location id="id43" x="-168" y="-608"><committed/></location><location id="id44" x="-272" y="-104"><committed/></location><location id="id45" x="-480" y="-456"><committed/></location><location id="id46" x="-1104" y="-104" color="#ff0000"><name x="-1256" y="-112">InactiveNoDemand</name></location><location id="id47" x="-1104" y="-200"><committed/></location><location id="id48" x="-992" y="-104"><committed/></location><location id="id49" x="-824" y="16" color="#ffff00"></location><location id="id50" x="-824" y="-104"><committed/></location><location id="id51" x="-664" y="-104"><committed/></location><location id="id52" x="-464" y="-104"><committed/></location><location id="id53" x="192" y="-384"><committed/></location><location id="id54" x="72" y="-384"><committed/></location><location id="id55" x="-672" y="-384"><committed/></location><location id="id56" x="-168" y="-384" color="#00ff00"></location><location id="id57" x="-832" y="-384"><committed/></location><location id="id58" x="-1000" y="-384"><committed/></location><location id="id59" x="-1104" y="-384" color="#ff0000"><name x="-1232" y="-392">InactiveWaiting</name></location><init ref="id46"/><transition><source ref="id40"/><target ref="id42"/><label kind="guard" x="-376" y="-528">timer_set</label></transition><transition><source ref="id40"/><target ref="id45"/><label kind="guard" x="-560" y="-520">!timer_set</label></transition><transition><source ref="id41"/><target ref="id56"/><label kind="synchronisation" x="-72" y="-544">go[who]!</label><label kind="assignment" x="-72" y="-528">mvmts_on++,
mvmts_not_out++</label><nail x="-80" y="-496"/></transition><transition><source ref="id43"/><target ref="id41"/><label kind="guard" x="-192" y="-568">late[who] &amp;&amp; !timer_set</label><nail x="-128" y="-568"/></transition><transition><source ref="id42"/><target ref="id56"/></transition><transition><source ref="id43"/><target ref="id42"/><label kind="guard" x="-416" y="-600">late[who] &amp;&amp; timer_set &amp;&amp;
max_t[id] &gt; MAX - min[who]</label><nail x="-280" y="-528"/></transition><transition><source ref="id43"/><target ref="id41"/><label kind="guard" x="-152" y="-672">late[who] &amp;&amp; timer_set &amp;&amp;
max_t[id] &lt;= MAX - min[who]</label><nail x="-128" y="-640"/></transition><transition><source ref="id43"/><target ref="id40"/><label kind="guard" x="-368" y="-632">!late[who]</label><nail x="-480" y="-608"/></transition><transition><source ref="id56"/><target ref="id43"/><label kind="synchronisation" x="-208" y="-504">call[id]?</label><nail x="-216" y="-440"/><nail x="-216" y="-560"/></transition><transition><source ref="id44"/><target ref="id52"/><label kind="guard" x="-400" y="-128">!timer_set</label></transition><transition><source ref="id53"/><target ref="id44"/><label kind="guard" x="40" y="-240">mvmts_not_out == 0</label><nail x="192" y="-104"/></transition><transition><source ref="id55"/><target ref="id56"/><label kind="guard" x="-488" y="-344">!opp_demand(id)</label><nail x="-576" y="-320"/><nail x="-248" y="-320"/></transition><transition><source ref="id45"/><target ref="id42"/><label kind="synchronisation" x="-440" y="-488">timer_on[id]!</label><label kind="assignment" x="-440" y="-472">timer_set = true</label></transition><transition><source ref="id56"/><target ref="id45"/><label kind="guard" x="-400" y="-416">!timer_set</label><label kind="synchronisation" x="-400" y="-400">opp?</label><nail x="-480" y="-384"/></transition><transition><source ref="id46"/><target ref="id47"/><label kind="synchronisation" x="-1184" y="-152">call[id]?</label></transition><transition><source ref="id48"/><target ref="id46"/><label kind="guard" x="-1088" y="-88">demand[id] == 0</label></transition><transition><source ref="id47"/><target ref="id59"/><label kind="synchronisation" x="-1144" y="-336">opp!</label></transition><transition><source ref="id48"/><target ref="id47"/><label kind="guard" x="-1048" y="-176">demand[id] &gt; 0</label></transition><transition><source ref="id50"/><target ref="id48"/><label kind="guard" x="-944" y="-135">mvmts_on == 0</label><label kind="synchronisation" x="-944" y="-120">finished[id]!</label></transition><transition><source ref="id50"/><target ref="id49"/><label kind="guard" x="-816" y="-24">mvmts_on &gt; 0</label></transition><transition><source ref="id49"/><target ref="id50"/><label kind="synchronisation" x="-952" y="-56">gone_off[id]?</label><label kind="assignment" x="-936" y="-40">mvmts_on--</label><nail x="-848" y="-8"/><nail x="-848" y="-72"/></transition><transition><source ref="id56"/><target ref="id52"/><label kind="guard" x="-472" y="-256">timer_set</label><label kind="synchronisation" x="-472" y="-240">maxed_out[id]?</label><label kind="assignment" x="-472" y="-224">timer_set = false,
mvmts_not_out = 0</label><nail x="-328" y="-192"/><nail x="-464" y="-192"/></transition><transition><source ref="id51"/><target ref="id50"/><label kind="guard" x="-768" y="-152">!held[m2]</label><nail x="-696" y="-136"/><nail x="-776" y="-136"/></transition><transition><source ref="id51"/><target ref="id50"/><label kind="guard" x="-768" y="-104">held[m2]</label><label kind="synchronisation" x="-768" y="-88">go_off[m2]!</label><label kind="assignment" x="-768" y="-72">held[m2] = false</label></transition><transition><source ref="id52"/><target ref="id51"/><label kind="guard" x="-600" y="-152">!held[m1]</label><nail x="-520" y="-136"/><nail x="-608" y="-136"/></transition><transition><source ref="id52"/><target ref="id51"/><label kind="guard" x="-608" y="-104">held[m1]</label><label kind="synchronisation" x="-608" y="-88">go_off[m1]!</label><label kind="assignment" x="-608" y="-72">held[m1] = false</label></transition><transition><source ref="id56"/><target ref="id56"/><label kind="synchronisation" x="-160" y="-288">gone_off[id]?</label><label kind="assignment" x="-160" y="-272">mvmts_on--</label><nail x="-168" y="-232"/><nail x="-200" y="-232"/></transition><transition><source ref="id44"/><target ref="id52"/><label kind="guard" x="-400" y="-56">timer_set</label><label kind="synchronisation" x="-400" y="-40">timer_off[id]!</label><label kind="assignment" x="-400" y="-24">timer_set = false</label><nail x="-304" y="-64"/><nail x="-416" y="-64"/></transition><transition><source ref="id53"/><target ref="id56"/><label kind="guard" x="-40" y="-328">mvmts_not_out &gt; 0</label><nail x="128" y="-312"/><nail x="-80" y="-312"/></transition><transition><source ref="id54"/><target ref="id53"/><label kind="guard" x="88" y="-456">hold[who]</label><label kind="assignment" x="88" y="-440">held[who] = true</label><nail x="88" y="-424"/><nail x="176" y="-424"/></transition><transition><source ref="id54"/><target ref="id53"/><label kind="guard" x="88" y="-416">!hold[who]</label><label kind="synchronisation" x="88" y="-400">go_off[who]!</label></transition><transition><source ref="id56"/><target ref="id54"/><label kind="synchronisation" x="-104" y="-424">gapped_out[id]?</label><label kind="assignment" x="-104" y="-400">mvmts_not_out--</label></transition><transition><source ref="id57"/><target ref="id55"/><label kind="guard" x="-800" y="-480">!call_arr[m2]</label><nail x="-824" y="-464"/><nail x="-680" y="-464"/></transition><transition><source ref="id58"/><target ref="id57"/><label kind="guard" x="-968" y="-480">!call_arr[m1]</label><nail x="-992" y="-464"/><nail x="-848" y="-464"/></transition><transition><source ref="id57"/><target ref="id55"/><label kind="guard" x="-816" y="-448">call_arr[m2]</label><label kind="synchronisation" x="-816" y="-432">go[m2]!</label><label kind="assignment" x="-816" y="-416">mvmts_on++,
mvmts_not_out++</label></transition><transition><source ref="id55"/><target ref="id45"/><label kind="guard" x="-624" y="-472">opp_demand(id)</label><nail x="-576" y="-456"/></transition><transition><source ref="id58"/><target ref="id57"/><label kind="guard" x="-984" y="-448">call_arr[m1]</label><label kind="synchronisation" x="-984" y="-432">go[m1]!</label><label kind="assignment" x="-984" y="-416">mvmts_on++,
mvmts_not_out++</label></transition><transition><source ref="id59"/><target ref="id58"/><label kind="synchronisation" x="-1080" y="-408">start[id]?</label></transition></template><template><name>MaxTimer</name><parameter>const ph pid, const int MAX</parameter><location id="id60" x="-160" y="-40"><committed/></location><location id="id61" x="56" y="-40"><name x="48" y="-88">Running</name><label kind="invariant" x="48" y="-72">max_t[pid] &lt;= MAX</label></location><location id="id62" x="-352" y="-40"><name x="-362" y="-70">Off</name></location><init ref="id62"/><transition><source ref="id61"/><target ref="id62"/><label kind="synchronisation" x="-192" y="24">timer_off[pid]?</label><nail x="-72" y="16"/><nail x="-224" y="16"/></transition><transition><source ref="id60"/><target ref="id62"/><label kind="synchronisation" x="-300" y="-55">maxed_out[pid]!</label></transition><transition><source ref="id61"/><target ref="id60"/><label kind="guard" x="-136" y="-56">max_t[pid] == MAX</label></transition><transition><source ref="id62"/><target ref="id61"/><label kind="synchronisation" x="-200" y="-144">timer_on[pid]?</label><label kind="assignment" x="-200" y="-128">max_t[pid] = 0</label><nail x="-208" y="-112"/><nail x="-88" y="-112"/></transition></template><template><name>RingCtrl3</name><declaration>bool any_demand() {
    return exists(i : ph) (demand[i] &gt; 0);
}</declaration><location id="id63" x="-240" y="-96"><committed/></location><location id="id64" x="-352" y="-96"></location><location id="id65" x="-456" y="-96"><committed/></location><location id="id66" x="-600" y="-96"></location><location id="id67" x="-712" y="-96"><committed/></location><location id="id68" x="-832" y="-96"></location><location id="id69" x="-952" y="-96"><committed/></location><location id="id70" x="-952" y="64" color="#ff0000"><name x="-1032" y="56">RedRest</name></location><init ref="id70"/><transition><source ref="id65"/><target ref="id63"/><label kind="guard" x="-400" y="-184">!demand[2]</label><nail x="-424" y="-168"/><nail x="-288" y="-168"/></transition><transition><source ref="id64"/><target ref="id63"/><label kind="synchronisation" x="-336" y="-112">finished[2]?</label></transition><transition><source ref="id65"/><target ref="id64"/><label kind="guard" x="-440" y="-128">demand[2]</label><label kind="synchronisation" x="-440" y="-112">start[2]!</label></transition><transition><source ref="id63"/><target ref="id70"/><label kind="guard" x="-680" y="40">!any_demand()</label><nail x="-240" y="64"/></transition><transition><source ref="id63"/><target ref="id69"/><label kind="guard" x="-616" y="-32">any_demand()</label><nail x="-296" y="-16"/><nail x="-912" y="-16"/></transition><transition><source ref="id67"/><target ref="id65"/><label kind="guard" x="-632" y="-184">!demand[1]</label><nail x="-680" y="-168"/><nail x="-496" y="-168"/></transition><transition><source ref="id66"/><target ref="id65"/><label kind="synchronisation" x="-568" y="-112">finished[1]?</label></transition><transition><source ref="id67"/><target ref="id66"/><label kind="guard" x="-696" y="-128">demand[1]</label><label kind="synchronisation" x="-696" y="-112">start[1]!</label></transition><transition><source ref="id69"/><target ref="id67"/><label kind="guard" x="-872" y="-184">!demand[0]</label><nail x="-928" y="-168"/><nail x="-736" y="-168"/></transition><transition><source ref="id68"/><target ref="id67"/><label kind="synchronisation" x="-816" y="-112">finished[0]?</label></transition><transition><source ref="id69"/><target ref="id68"/><label kind="guard" x="-936" y="-128">demand[0]</label><label kind="synchronisation" x="-936" y="-112">start[0]!</label></transition><transition><source ref="id70"/><target ref="id69"/><label kind="synchronisation" x="-992" y="-8">opp?</label></transition></template><system>const int RED_AMBER = 1; 
const int INIT_GREEN = 7; 
const int AMBER = 3; 
const int RED_CLEAR = 5; 
const int GAP = 2;

const int MAX1 = 20;
const int MAX2 = 20;
const int MAX3 = 23;

// Place template instantiations here.

RC = RingCtrl2();

PC0 = PhaseCtrl1(0, 0);
MTim0 = MaxTimer(0, MAX1);
MvC0 = MovementCtrl(0, 0,RED_AMBER, INIT_GREEN, AMBER, RED_CLEAR, GAP);
L0 = Light(0);
Det0 = CarPulseDetector(0);

PC1 = PhaseCtrl2(1, 1, 2, MAX2);
MTim1 = MaxTimer(1, MAX2);
MvC11 = MovementCtrl(1,1, RED_AMBER, INIT_GREEN, AMBER, RED_CLEAR, GAP);
L11 = Light(1);
Det11 = CarPulseDetector(1);
MvC12 = MovementCtrl(2,1, RED_AMBER, INIT_GREEN, AMBER, RED_CLEAR, GAP);
L12= Light(2);
Det12 = CarPulseDetector(2);

/*
PC2 = PhaseCtrl2(2, 3, 4, MAX2);
MTim2 = MaxTimer(2, MAX2);
MvC21 = MovementCtrl(3,2, RED_AMBER, INIT_GREEN, AMBER, RED_CLEAR, GAP);
L21 = Light(3);
Det21 = CarPulseDetector(3);
MvC22 = MovementCtrl(4,2, RED_AMBER, INIT_GREEN, AMBER, RED_CLEAR, GAP);
L22= Light(4);
Det22 = CarPulseDetector(4);
*/


// List one or more processes to be composed into a system.
system RC, 
       PC0, MTim0, 
            MvC0, L0, Det0,
       PC1, MTim1, 
            MvC11, L11, Det11,
            MvC12, L12, Det12;
       /*PC2, MTim2, 
            MvC21, L21, Det21,
            MvC22, L22, Det22;*/

/*
Possible optimizations:
 * one max-timer per ring
*/</system></nta>